{"version":3,"sources":["webpack:///./src/components/floating-image.js","webpack:///./src/components/page-title.js","webpack:///./src/pages/background-color.js"],"names":["Image","Img","rhythm","options","blockMarginBottom","gutter","default","mq","tablet","desktop","FloatingImage","imageMobile","imageDesktop","title","backgroundColor","Fragment","fixed","media","phablet","replace","trim","PageTitle","children","css","BackgroundColor","data","location","image","coverImage","localFile","childImageSharp","fluid","imageTitle","credit","imageBackgroundColor","floatingImageMobile","floatingImage","fullWidthImage","query"],"mappings":"yLAOMA,EAAQ,YAAOC,IAAP,qBAAH,2CAGQC,YAAmC,EAA5BC,IAAQC,mBAHvB,gBAIMF,YAAmC,EAA5BC,IAAQC,mBAJrB,kBAKQC,SAAOC,QALf,IAOPC,KAAGC,OAPI,kBAQUH,SAAOG,OARjB,KAWPD,KAAGE,QAXI,kBAYUJ,SAAOI,QAZjB,MAiDIC,IAjCO,SAAC,GAAD,IACpBC,EADoB,EACpBA,YACAC,EAFoB,EAEpBA,aACAC,EAHoB,EAGpBA,MACAC,EAJoB,EAIpBA,gBAJoB,OAMpB,YAAC,IAAMC,SAAP,KAaE,YAACf,EAAD,CACEgB,MAAO,CACLL,EADK,iBAGAC,EAHA,CAIHK,MAAOV,KAAGW,QAAQC,QAAX,aAAiCC,UAG5CN,gBAAiBA,IAAoC,EACrDD,MAAOA,O,kCCnDb,0B,yCAIeQ,IAFG,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAkB,kBAAIC,IAAG,GAAqBD,K,kCCFhE,gIA0CeE,UAnCS,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,SAAT,OACtB,YAAC,IAAD,CACEA,SAAUA,EACVC,MAAOF,EAAKG,WAAWC,UAAUC,gBAAgBC,MACjDC,WAAU,IAAMP,EAAKG,WAAWf,MAAtB,QAAmCY,EAAKG,WAAWK,OAAnD,sBACVC,qBAAqB,WAErB,YAAC,IAAD,yBACA,YAAC,IAAD,CACEvB,YAAac,EAAKU,oBAAoBN,UAAUC,gBAAgBd,MAChEJ,aAAca,EAAKW,cAAcP,UAAUC,gBAAgBd,MAC3DH,MAAK,IAAMY,EAAKW,cAAcvB,MAAzB,QAAsCY,EAAKW,cAAcH,OAAzD,sBACLnB,gBAAgB,YAElB,wTAMA,4EAEE,2CAFF,uJAOA,YAAC,IAAD,CACEiB,MAAON,EAAKY,eAAeR,UAAUC,gBAAgBC,MACrDjB,gBAAgB,UAChBD,MAAK,IAAMY,EAAKY,eAAexB,MAA1B,QAAuCY,EAAKY,eAAeJ,OAA3D,0BAOJ,IAAMK,EAAK","file":"component---src-pages-background-color-js-999ca329c24cf1514aac.js","sourcesContent":["import React from \"react\"\nimport Img from \"gatsby-image\"\nimport styled from \"@emotion/styled\"\n\nimport { rhythm, options } from \"../utils/typography\"\nimport { mq, gutter } from \"../utils/presets\"\n\nconst Image = styled(Img)`\n  display: block;\n  float: right;\n  margin-bottom: ${rhythm(options.blockMarginBottom * 2)};\n  margin-left: ${rhythm(options.blockMarginBottom * 2)};\n  margin-right: -${gutter.default};\n\n  ${mq.tablet} {\n    margin-right: -${gutter.tablet};\n  }\n\n  ${mq.desktop} {\n    margin-right: -${gutter.desktop};\n  }\n`\n\nconst FloatingImage = ({\n  imageMobile,\n  imageDesktop,\n  title,\n  backgroundColor,\n}) => (\n  <React.Fragment>\n    {/*\n        gatsby-image sets a couple of inline styles on its outer\n        container and allows overriding via its `style` prop. One\n        of these inline styles is `display: inline-block´.\n\n        In this case we have two images, one for mobile and one\n        for desktop, and toggle their visibility with `display`,\n        so we need to override the gatsby-image default to make\n        our own styles work.\n\n        https://www.gatsbyjs.org/packages/gatsby-image/#gatsby-image-props\n    */}\n    <Image\n      fixed={[\n        imageMobile,\n        {\n          ...imageDesktop,\n          media: mq.phablet.replace(`@media`, ``).trim(),\n        },\n      ]}\n      backgroundColor={backgroundColor ? backgroundColor : false}\n      title={title}\n    />\n  </React.Fragment>\n)\n\nexport default FloatingImage\n","import React from \"react\"\n\nconst PageTitle = ({ children }) => <h2 css={{ marginTop: 0 }}>{children}</h2>\n\nexport default PageTitle\n","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\nimport FloatingImage from \"../components/floating-image\"\nimport PageTitle from \"../components/page-title\"\nimport Layout from \"../components/layout\"\n\nconst BackgroundColor = ({ data, location }) => (\n  <Layout\n    location={location}\n    image={data.coverImage.localFile.childImageSharp.fluid}\n    imageTitle={`“${data.coverImage.title}” by ${data.coverImage.credit} (via unsplash.com)`}\n    imageBackgroundColor=\"#F0C450\"\n  >\n    <PageTitle>Background Color</PageTitle>\n    <FloatingImage\n      imageMobile={data.floatingImageMobile.localFile.childImageSharp.fixed}\n      imageDesktop={data.floatingImage.localFile.childImageSharp.fixed}\n      title={`“${data.floatingImage.title}” by ${data.floatingImage.credit} (via unsplash.com)`}\n      backgroundColor=\"#DB3225\"\n    />\n    <p>\n      With the Background Color technique, you can specify a CSS background\n      color to fill the space as your images download. For graphic images with a\n      predominant color in the foreground or background, a matching color in the\n      loading space can create a visually pleasing image load experience.\n    </p>\n    <p>\n      To use the Background Color technique, provide a{` `}\n      <code>backgroundColor</code> prop in your floating or fixed image\n      component instance. You can use hex color values, RGB values, or any other\n      valid CSS background color format.\n    </p>\n\n    <Img\n      fluid={data.fullWidthImage.localFile.childImageSharp.fluid}\n      backgroundColor=\"#F9D6CE\"\n      title={`“${data.fullWidthImage.title}” by ${data.fullWidthImage.credit} (via unsplash.com)`}\n    />\n  </Layout>\n)\n\nexport default BackgroundColor\n\nexport const query = graphql`\n  query {\n    coverImage: unsplashImagesYaml(title: { eq: \"Cactus\" }) {\n      credit\n      title\n      localFile {\n        childImageSharp {\n          fluid(maxWidth: 720) {\n            ...GatsbyImageSharpFluid_noBase64\n          }\n        }\n      }\n    }\n    floatingImageMobile: unsplashImagesYaml(title: { eq: \"Pug with red hat\" }) {\n      localFile {\n        childImageSharp {\n          fixed(width: 120) {\n            ...GatsbyImageSharpFixed_noBase64\n          }\n        }\n      }\n    }\n    floatingImage: unsplashImagesYaml(title: { eq: \"Pug with red hat\" }) {\n      credit\n      title\n      localFile {\n        childImageSharp {\n          fixed(width: 200) {\n            ...GatsbyImageSharpFixed_noBase64\n          }\n        }\n      }\n    }\n    fullWidthImage: unsplashImagesYaml(title: { eq: \"Cacti\" }) {\n      credit\n      title\n      localFile {\n        childImageSharp {\n          fluid(maxWidth: 600) {\n            ...GatsbyImageSharpFluid_noBase64\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}